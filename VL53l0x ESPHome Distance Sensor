esphome:
  name: vl-senzor
  friendly_name: VL senzor

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "yEZjrk1rOS21jur+ps99NvZ9VJ5pPwdGEEmFaOcjlSE="

ota:
  password: "e7ec38944022db552c2691b4409032a5"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  manual_ip:
    static_ip: 192.168.1.11
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Vl-Senzor Fallback Hotspot"
    password: "mBDMjd9LgZJx"

captive_portal:
# the vl53l0x is i2c
i2c:
  - id: i2c_a
    scl: 9
    sda: 8


##
## The virutal break beam sensor.
## The state of this will be controlled 
## by breakbeam_sensor_dist's lambda as necessary.
##
binary_sensor:
  - name: "Breakbeam Sensor"
    id: breakbeam_sensor
    platform: template
    device_class: motion

##
## The actual sensor. 
## This sensor's lambda will control the state of our 
## virtual break beam sensor, breakbeam_sensor.
##
sensor:
  - name: "Breakbeam Sensor Dist"
    id: breakbeam_sensor_dist
    platform: vl53l0x
    address: 0x29
    update_interval: 0.25s
#    long_range: true
    internal: true
    #
    # Only send a value back if breakbeam_sensor changes.
    #
    filters:
      - lambda: !lambda |-
          /**
           * YOU MIGHT WANT TO CONFIGURE THIS.
           * Distance below which to trip the virtual break beam sensor.
           * '0.5' meters is about 20  inches.
           */
          static double minTripDistance = 0.3;
          static double maxTripDistance = 0.9;
          if ((x >= minTripDistance) & (x <= maxTripDistance)) {
            if (id(breakbeam_sensor).state == true) {
              // Beam was already broken
              return {};
            }
            // Beam was just broken
            id(breakbeam_sensor).publish_state(true);
            ESP_LOGI("breakbeam_sensor_dist", "Set breakbeam_sensor to Detected");
            return {};
          }
          else {
            if (id(breakbeam_sensor).state == false) {
              // Beam was already un-broken
              return {};
            }
            // Beam was just un-broken
            id(breakbeam_sensor).publish_state(false);
            ESP_LOGI("breakbeam_sensor_dist", "Set breakbeam_sensor to Cleared");
            return {};
          }   
